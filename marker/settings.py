"""
Django settings for marker project.

Generated by 'django-admin startproject' using Django 1.8.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import sys

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'cc+90!p1+mw9(37z5s)hq6qb$#f-$7d&0*t=9&)5qdlunu+=%*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'accounts',
    'oauth',
    'locations',
    'commons',
    'hc',
    'tagging',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'middleware.middlewares.UserAuthMiddleware',
)

ROOT_URLCONF = 'marker.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'marker.wsgi.application'

# Authentication Backends
AUTHENTICATION_BACKENDS = (
    ('accounts.models.MyAuthBackend'),
)

# Custom Auth Model
AUTH_USER_MODEL = 'accounts.User'
# CUSTOM_USER_MODEL = 'accounts.User'

# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': 'marker',
        'USER': 'erik',
        'PASSWORD': 'password',
        'HOST': 'localhost',
        'PORT': '5432',
    }
    # 'default': {
    #     'ENGINE': 'django.db.backends.mysql',
    #     'NAME': 'marker',
    #     'USER': 'erik',
    #     'PASSWORD': 'password',
    #     'HOST': '127.0.0.1',
    #     'PORT': '3306',
    # }
}

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format' : "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt' : "%d/%b/%Y %H:%M:%S"
                    },
        'simple': {
            'format': '[%(levelname)s] %(asctime)s %(pathname)s %(message)s',
                    },
            },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/api.log'),
            'formatter': 'verbose'
                    },
            },
    'loggers': {
        'django': {
            'handlers':['file'],
            'propagate': True,
            'level':'DEBUG',
        },
        'locations': {
            'handlers': ['file'],
            'level': 'DEBUG',
                    },
        'marker': {
            'handlers': ['file'],
            'level': 'DEBUG',
            },
        'accounts': {
            'handlers': ['file'],
            'level': 'DEBUG',
            },
            }
    }


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'

if 'test' in sys.argv or 'test_coverage' in sys.argv:  # Covers regular testing and django-coverage

    from django.test.runner import DiscoverRunner
    class UnManagedModelTestRunner(DiscoverRunner):
        '''
        Test runner that automatically makes all unmanaged models in your Django
        project managed for the duration of the test run.
        Many thanks to the Caktus Group: http://bit.ly/1N8TcHW
        '''

        def setup_test_environment(self, *args, **kwargs):
            from django.db.models.loading import get_models
            self.unmanaged_models = [m for m in get_models() if not m._meta.managed]
            for m in self.unmanaged_models:
                m._meta.managed = True
                super(UnManagedModelTestRunner, self).setup_test_environment(*args, **kwargs)

        def teardown_test_environment(self, *args, **kwargs):
            super(UnManagedModelTestRunner, self).teardown_test_environment(*args, **kwargs)
            # reset unmanaged models
            for m in self.unmanaged_models:
                m._meta.managed = False




#     DATABASES['default']['ENGINE'] = 'django.db.backends.sqlite3'
#     DATABASES['default']['HOST'] = '127.0.0.1'
#     DATABASES['default']['USER'] = 'username'
#     DATABASES['default']['PASSWORD'] = 'secret'

#     # Set Django's test runner to the custom class defined above
#     TEST_RUNNER = 'marker.test_settings.UnManagedModelTestRunner'
